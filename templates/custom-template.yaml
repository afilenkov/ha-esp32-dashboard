# Custom Configuration Template
# 
# Instructions:
# 1. Copy this file: cp templates/custom-template.yaml my-custom-dashboard.yaml
# 2. Edit the substitutions section with your device name
# 3. Customize the sensors section with your Home Assistant entities
# 4. Modify the display lambda to design your layout
# 5. Upload: esphome run my-custom-dashboard.yaml

substitutions:
  device_name: "my-custom-dashboard"  # Change this
  friendly_name: "My Custom Dashboard"  # Change this
  
esphome:
  name: ${device_name}
  platform: ESP32
  board: esp32dev
  
# WiFi Configuration
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${friendly_name} Fallback"
    password: !secret ap_password

captive_portal:

# Logging
logger:
  level: DEBUG  # Change to INFO in production

# Home Assistant API
api:
  encryption:
    key: !secret ha_api_key

# Over-The-Air Updates
ota:
  - platform: esphome
    password: !secret ota_password

# Optional: Web Server
web_server:
  port: 80

# Time Synchronization
time:
  - platform: homeassistant
    id: ha_time
    timezone: "America/New_York"  # Change to your timezone

# Fonts - Add or remove as needed
font:
  - file: "fonts/Roboto-Regular.ttf"
    id: font_small
    size: 14
  - file: "fonts/Roboto-Regular.ttf"
    id: font_medium
    size: 20
  - file: "fonts/Roboto-Bold.ttf"
    id: font_large
    size: 36
  # Optional: Add icons
  # - file: "fonts/materialdesignicons-webfont.ttf"
  #   id: font_icons
  #   size: 48
  #   glyphs:
  #     - "\U000F067F" # thermometer

# SPI Configuration for Display
spi:
  clk_pin: GPIO18   # Adjust if needed
  mosi_pin: GPIO23  # Adjust if needed

# Display Configuration
display:
  - platform: waveshare_epaper
    cs_pin: GPIO5      # Adjust if needed
    dc_pin: GPIO17     # Adjust if needed
    busy_pin: GPIO4    # Adjust if needed
    reset_pin: GPIO16  # Adjust if needed
    model: 7.50inv2    # Change to your display model
    update_interval: 300s  # 5 minutes
    rotation: 0  # 0, 90, 180, or 270
    lambda: |-
      // Get display dimensions
      const int width = it.get_width();
      const int height = it.get_height();
      
      // ============================================
      // CUSTOMIZE YOUR LAYOUT BELOW
      // ============================================
      
      // Example: Display current time
      it.strftime(width/2, 50, id(font_large), TextAlign::CENTER, 
                  "%H:%M", id(ha_time).now());
      
      // Example: Display date
      it.strftime(width/2, 100, id(font_medium), TextAlign::CENTER, 
                  "%A, %B %d %Y", id(ha_time).now());
      
      // Example: Display a sensor value
      // if (id(my_sensor).has_state()) {
      //   it.printf(50, 200, id(font_medium), "Temp: %.1fÂ°C", id(my_sensor).state);
      // }
      
      // Example: Draw a line
      // it.line(0, 150, width, 150);
      
      // Example: Draw a rectangle
      // it.rectangle(10, 10, 100, 50);
      
      // Example: Draw filled rectangle
      // it.filled_rectangle(10, 10, 100, 50);
      
      // Example: Draw a circle
      // it.circle(width/2, height/2, 50);
      
      // Footer with update time
      it.strftime(10, height - 10, id(font_small), TextAlign::BOTTOM_LEFT, 
                  "Updated: %H:%M", id(ha_time).now());

# ============================================
# SENSORS - ADD YOUR HOME ASSISTANT ENTITIES
# ============================================
sensor:
  # Example temperature sensor
  # - platform: homeassistant
  #   id: my_sensor
  #   entity_id: sensor.my_temperature  # Change this
  #   internal: true
  
  # Example weather sensor
  # - platform: homeassistant
  #   id: outside_temp
  #   entity_id: weather.home
  #   attribute: temperature
  #   internal: true
  
  # WiFi Signal Strength
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    update_interval: 60s
  
  # Optional: Uptime sensor
  # - platform: uptime
  #   name: "${friendly_name} Uptime"

# ============================================
# TEXT SENSORS
# ============================================
text_sensor:
  # WiFi Information
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
    ssid:
      name: "${friendly_name} SSID"
  
  # ESPHome Version
  - platform: version
    name: "${friendly_name} ESPHome Version"
  
  # Example: Weather condition
  # - platform: homeassistant
  #   id: weather_condition
  #   entity_id: weather.home
  #   attribute: condition
  #   internal: true

# ============================================
# BINARY SENSORS
# ============================================
binary_sensor:
  # Device Status
  - platform: status
    name: "${friendly_name} Status"
  
  # Example: Door sensor
  # - platform: homeassistant
  #   id: front_door
  #   entity_id: binary_sensor.front_door
  #   internal: true

# ============================================
# SWITCHES
# ============================================
switch:
  # Example: Control a light
  # - platform: homeassistant
  #   id: living_room_light
  #   entity_id: light.living_room

# ============================================
# BUTTONS
# ============================================
button:
  # Restart button
  - platform: restart
    name: "${friendly_name} Restart"
  
  # Manual display refresh
  - platform: template
    name: "${friendly_name} Refresh Display"
    on_press:
      - component.update: display

# ============================================
# OPTIONAL: DEEP SLEEP (for battery operation)
# ============================================
# Uncomment to enable deep sleep
# deep_sleep:
#   id: deep_sleep_control
#   run_duration: 30s       # Time awake
#   sleep_duration: 10min   # Time asleep
#   
#   # Wake on time
#   # wakeup_pin: GPIO33    # Optional: wake on button press
#   # wakeup_pin_mode: KEEP_AWAKE

# ============================================
# LAYOUT TIPS
# ============================================
# 
# Drawing Functions:
# - it.printf(x, y, font, "text")
# - it.strftime(x, y, font, "format", time)
# - it.line(x1, y1, x2, y2)
# - it.rectangle(x, y, width, height)
# - it.filled_rectangle(x, y, width, height)
# - it.circle(x, y, radius)
# - it.filled_circle(x, y, radius)
# 
# Text Alignment:
# - TextAlign::TOP_LEFT
# - TextAlign::TOP_CENTER
# - TextAlign::TOP_RIGHT
# - TextAlign::CENTER_LEFT
# - TextAlign::CENTER
# - TextAlign::CENTER_RIGHT
# - TextAlign::BOTTOM_LEFT
# - TextAlign::BOTTOM_CENTER
# - TextAlign::BOTTOM_RIGHT
# 
# Conditional Display:
# if (id(sensor_name).has_state()) {
#   // Display sensor value
# }
# 
# String Formatting:
# - %.0f  - Integer (no decimals)
# - %.1f  - One decimal place
# - %.2f  - Two decimal places
# - %d    - Integer
# - %s    - String
# 
# Time Formatting:
# - %H:%M     - 24-hour time (14:30)
# - %I:%M %p  - 12-hour time (2:30 PM)
# - %A        - Full weekday (Monday)
# - %a        - Short weekday (Mon)
# - %B        - Full month (January)
# - %b        - Short month (Jan)
# - %d        - Day of month (01-31)
# - %Y        - Full year (2025)
# - %y        - Short year (25)
#
# ============================================
