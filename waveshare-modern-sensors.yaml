################################################################################
# Sensors
################################################################################
sensor:
  # WiFi
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    id: ${device_internal_name}_wifi_signal_sensor
    update_interval: ${device_sampling_time}

  # Uptime
  - platform: uptime
    name: "Uptime Sensor"
    id: ${device_internal_name}_uptime_sensor
    update_interval: ${device_sampling_time}
    internal: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: ${device_internal_name}_uptime_human
            state: !lambda |-
              int seconds = round(id(${device_internal_name}_uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

# HA Energy Sensor
  - platform: homeassistant
    entity_id: sensor.luxpower_lxp_grid_power_ct
    id: energy_meter_power
    accuracy_decimals: 1          
    on_value:
      - lvgl.label.update:
          id: energy_meter_power_title
          text:
            format: "\U000F192C %.0fW"
            args: [ 'x' ]
      #- lvgl.indicator.update:
      #    id: grid_needle
      #    value: !lambda return x * 10;
      #- lvgl.label.update:
      #    id: grid_in_text
      #    text:
      #      format: "%.1f"
      #      args: [ 'x' ]
  
  ## Power usage
  - platform: homeassistant
    id: grid_import
    entity_id: sensor.luxpower_lxp_grid_power
    on_value:
      - lvgl.label.update:
          id: grid_power_text
          text:
            format: "%.0fW"
            args: [ 'x' ]
      - lvgl.label.update:
          id: grid_power_text2
          text:
            format: "%.0fW"
            args: [ 'x' ]
      - if:
          condition:
            - lambda: 'return x == 0;'
          then:
            - lvgl.label.update:
                id: grid_power_text2
                text_color: not_active_text
            - lvgl.label.update:
                id: grid_power_icon2
                text_color: not_active_text
          else:
            - lvgl.label.update:
                id: grid_power_text2
                text_color: active_value_text_color
            - lvgl.label.update:
                id: grid_power_icon2
                text_color: active_value_text_color


  - platform: homeassistant
    id: house_load
    entity_id: sensor.luxpower_lxp_load_power
    on_value:
      - lvgl.label.update:
          id: house_load_text
          text:
            format: "%.0fW"
            args: [ 'x' ]            
      - lvgl.label.update:
          id: house_load_text2
          text:
            format: "%.0fW"
            args: [ 'x' ]            

  - platform: homeassistant
    id: luxpower_lxp_battery_state_of_charge
    entity_id: sensor.luxpower_lxp_battery_state_of_charge
    on_value:
      - lvgl.indicator.update:
          id: luxpower_lxp_battery_state_of_charge_needle
          value: !lambda return x;
      - lvgl.indicator.update:
          id: luxpower_lxp_battery_state_of_charge_needle2
          value: !lambda return x;
      - lvgl.label.update:
          id: luxpower_lxp_battery_state_of_charge_text
          text:
            format: "%.0f%%"
            args: [ 'x' ]  
      - lvgl.label.update:
          id: luxpower_lxp_battery_state_of_charge_text2
          text:
            format: "%.0f%%"
            args: [ 'x' ]  

  - platform: homeassistant
    id: luxpower_lxp_pv_power
    entity_id: sensor.luxpower_lxp_pv_power
    on_value:
      - lvgl.label.update:
          id: luxpower_lxp_pv_power_text
          text:
            format: "%.0fW"
            args: [ 'x' ]  
      - lvgl.label.update:
          id: luxpower_lxp_pv_power_text2
          text:
            format: "%.0fW"
            args: [ 'x' ]  
      - lvgl.label.update:
          id: luxpower_lxp_pv_power_text3
          text:
            format: "%.0fW"
            args: [ 'x' ]  
      - lvgl.label.update:
          id: luxpower_lxp_pv_power_text4
          text:
            format: "%.0fW"
            args: [ 'x' ]  

      - lvgl.indicator.update:
          id: luxpower_lxp_pv_power_needle
          value: !lambda return x;
      - lvgl.indicator.update:
          id: luxpower_lxp_pv_power_needle2
          value: !lambda return x;
      - if:
          condition:
            - lambda: 'return x == 0;'
          then:
            - lvgl.label.update:
                id: luxpower_lxp_pv_power_text3
                text_color: not_active_text
            - lvgl.label.update:
                id: luxpower_lxp_pv_power_icon3
                text_color: not_active_text
          else:
            - lvgl.label.update:
                id: luxpower_lxp_pv_power_text3
                text_color: active_value_text_color
            - lvgl.label.update:
                id: luxpower_lxp_pv_power_icon3
                text_color: active_value_text_color




  - platform: homeassistant
    id: house_battery_power
    entity_id: sensor.luxpower_lxp_battery_power
    on_value:
      - script.execute: battery_update
      - lvgl.label.update:
          id: house_battery_power_text
          text:
            format: "%.0fW"
            args: [ 'x' ]  
      - lvgl.label.update:
          id: house_battery_power_text2
          text:
            format: "%.0fW"
            args: [ 'x' ]  
      - if:
          condition:
            - lambda: 'return x == 0;'
          then:
            - lvgl.label.update:
                id: house_battery_power_text2
                text_color: not_active_text
            - lvgl.label.update:
                id: house_battery_power_text_icon1
                text_color: not_active_text

            - if:
                condition:
                  - lambda: 'return id(luxpower_lxp_battery_state_of_charge).state < 100;'
                then:
                  - lvgl.label.update:
                     id: house_battery_power_text_icon
                     text: "\U000F12A1" # battery-low
                else:
                  - lvgl.label.update:
                      id: house_battery_power_text_icon
                      text: "\U000F12A3" # battery-high
          else:
            - lvgl.label.update:
                id: house_battery_power_text2
                text_color: active_value_text_color
            - lvgl.label.update:
                id: house_battery_power_text_icon1
                text_color: active_value_text_color

      - if:
          condition:
            - lambda: 'return x < 0;'
          then:
            - lvgl.label.update:
                id: house_battery_power_text_icon
                text: "\U000F17DE" # battery-arrow-down
      - if:
          condition:
            - lambda: 'return x > 0;'
          then:
            - lvgl.label.update:
                id: house_battery_power_text_icon
                text: "\U000F17E0" # battery-arrow-up

  ## total solar power
  - platform: homeassistant
    id: total_solar_power_w
    entity_id: sensor.daily_pv_energy
    on_value:
      - lvgl.label.update:
          id: daily_luxpower_lxp_pv_power_text     
          text:
            format: "%.2fKWh"
            args: [ 'x' ]
      - lvgl.label.update:
          id: daily_luxpower_lxp_pv_power_text2
          text:
            format: "%.2fKWh"
            args: [ 'x' ]

  - platform: homeassistant
    id: daily_grid_energy
    entity_id: sensor.daily_energy_in
    on_value:
      - lvgl.label.update:
          id: daily_grid_energy_text
          text:
            format: "%.1fKWh"
            args: [ 'x' ]  
      - lvgl.label.update:
          id: daily_grid_energy_text2
          text:
            format: "%.1fKWh"
            args: [ 'x' ]  

  - platform: homeassistant
    id: daily_load_energy
    entity_id: sensor.daily_load_energy
    on_value:
      - lvgl.label.update:
          id: daily_load_energy_text
          text:
            format: "%.1fKWh"
            args: [ 'x' ]  
      - lvgl.label.update:
          id: daily_load_energy_text2
          text:
            format: "%.1fKWh"
            args: [ 'x' ]  

  - platform: homeassistant
    entity_id: sensor.home_realfeel_temperature
    id: naver_weather_todayfeeltemp_1
    on_value:
      - lvgl.label.update:
          id: home_weather_now
          text:
            format: "%.1f°"
            args: [ 'x' ]    

  - platform: homeassistant
    entity_id: sensor.home_realfeel_temperature_max_day_0
    id: home_realfeel_temperature_max_day_0
    accuracy_decimals: 1
    on_value:
      - lvgl.label.update:
          id: home_weather_minmax
          text: 
            format: "#47ACF5 %.1f°#|#FF0000 %.1f°#"
            args: [ 'id(home_realfeel_temperature_min_day_0).state', 'x' ]

  - platform: homeassistant
    entity_id: sensor.home_realfeel_temperature_min_day_0
    id: home_realfeel_temperature_min_day_0

  - platform: homeassistant
    entity_id: sensor.home_humidity
    id: home_humidity
    on_value:
      - lvgl.label.update:
          id: home_weather_hum
          text: 
            format: "#47ACF5 HUM# %.0f%% #02D109 %.1f m/s"
            args: [ 'x', 'id(home_wind_speed_day_0).state']

  - platform: homeassistant
    entity_id: sensor.home_wind_speed_day_0
    id: home_wind_speed_day_0

  - platform: homeassistant
    entity_id: sensor.home_precipitation
    id: home_precipitation
    on_value:
      - if: 
          condition:
            - lambda: 'return x > 0;'
          then:
            - lvgl.label.update:
                id: home_weather_rainystarttmr
                text: 
                  format: "\U000F054A percipitation (%.1f)"
                  args: [ 'x' ]
            - lvgl.widget.show: home_weather_rainystarttmr
          else:
            - lvgl.widget.hide: home_weather_rainystarttmr


  ## Indoor temperature
  - platform: homeassistant
    id: indoor_temperature
    entity_id: sensor.thermostat_temperature
    on_value:
      - lvgl.label.update:
          id: indoor_temperature_text
          text:
            format: "%.1f °C"
            args: [ 'x' ]

  ## Outdoor temperature
  - platform: homeassistant
    id: outdoor_temperature
    entity_id: sensor.thermostat_outdoor_temperature
    on_value:
      - lvgl.label.update:
          id: outdoor_temperature_text
          text:
            format: "%.1f °C"
            args: [ 'x' ]
      - lvgl.label.update:
          id: outdoor_temperature_text2
          text:
            format: "%.1f °C"
            args: [ 'x' ]

  - platform: homeassistant
    id: yearly_pv_energy
    entity_id: sensor.yearly_pv_energy
    on_value:
      then:
        - sensor.template.publish:
            id: yearly_pv_energy_cost
            state: !lambda |-
              return x*0.171822;      

  - platform: template
    id: yearly_pv_energy_cost
    on_value:
      - lvgl.label.update:
          id: yearly_pv_cost
          text:
            format: "$%.2f"
            args: [ 'x' ]
      - lvgl.label.update:
          id: yearly_pv_cost2
          text:
            format: "$%.2f"
            args: [ 'x' ]

  - platform: homeassistant
    id: temperature_hi_day_0
    entity_id: sensor.temperature_hi_day_0
    on_value:
      - lvgl.label.update:
          id: home_weather_max_day_0
          text: 
            format: "%.1f°"
            args: [ 'x' ]

  - platform: homeassistant
    id: temperature_low_day_0
    entity_id: sensor.temperature_low_day_0
    on_value:
      - lvgl.label.update:
          id: home_weather_min_day_0
          text: 
            format: "%.1f°"
            args: [ 'x' ]

  - platform: homeassistant
    id: precipitation_day_0
    entity_id: sensor.precipitation_day_0
    on_value:
      - lvgl.label.update:
          id: precipitation_text_day_0
          text: 
            format: "%.1fmm"
            args: [ 'id(precipitation_day_0).state*25.4' ]


  - platform: homeassistant
    id: precipitation_probability_day_0
    entity_id: sensor.precipitation_probability_day_0
    on_value:
      - lvgl.label.update:
          id: precipitation_probability_text_day_0
          text:
            format: "%.0f%%"
            args: [ 'x' ]

  - platform: homeassistant
    entity_id: sensor.home_hours_of_sun_day_0
    id: home_hours_of_sun_day_0
    on_value:
      - lvgl.label.update:
          id: hours_of_sun_today
          text:
            format: "%.1fh"
            args: [ 'x' ]    

#day 1
  - platform: homeassistant
    id: temperature_hi_day_1
    entity_id: sensor.temperature_hi_day_1
    on_value:
      - lvgl.label.update:
          id: home_weather_max_day_1
          text: 
            format: "%.1f°"
            args: [ 'x' ]  

  - platform: homeassistant
    id: temperature_low_day_1
    entity_id: sensor.temperature_low_day_1
    on_value:
      - lvgl.label.update:
          id: home_weather_min_day_1
          text: 
            format: "%.1f°"
            args: [ 'x' ]

  - platform: homeassistant
    id: precipitation_day_1
    entity_id: sensor.precipitation_day_1
    on_value:
      - lvgl.label.update:
          id: precipitation_text_day_1
          text: 
            format: "%.1fmm"
            args: [ 'id(precipitation_day_1).state*25.4' ]

  - platform: homeassistant
    id: precipitation_probability_day_1
    entity_id: sensor.precipitation_probability_day_1
    on_value:
      - lvgl.label.update:
          id: precipitation_probability_text_day_1
          text:
            format: "%.0f%%"
            args: [ 'x' ]

  - platform: homeassistant
    entity_id: sensor.home_hours_of_sun_day_1
    id: home_hours_of_sun_day_1
    on_value:
      - lvgl.label.update:
          id: hours_of_sun_tomorrow
          text:
            format: "%.1fh"
            args: [ 'x' ]    
#day 2

  - platform: homeassistant
    id: temperature_hi_day_2
    entity_id: sensor.temperature_hi_day_2
    on_value:
      - lvgl.label.update:
          id: home_weather_max_day_2
          text: 
            format: "%.1f°"
            args: [ 'x' ]  

  - platform: homeassistant
    id: temperature_low_day_2
    entity_id: sensor.temperature_low_day_2
    on_value:
      - lvgl.label.update:
          id: home_weather_min_day_2
          text: 
            format: "%.1f°"
            args: [ 'x' ]

  - platform: homeassistant
    id: precipitation_day_2
    entity_id: sensor.precipitation_day_2
    on_value:
      - lvgl.label.update:
          id: precipitation_text_day_2
          text: 
            format: "%.1fmm"
            args: [ 'id(precipitation_day_2).state*25.4' ]

  - platform: homeassistant
    id: precipitation_probability_day_2
    entity_id: sensor.precipitation_probability_day_2
    on_value:
      - lvgl.label.update:
          id: precipitation_probability_text_day_2
          text:
            format: "%.0f%%"
            args: [ 'x' ]

  - platform: homeassistant
    entity_id: sensor.home_hours_of_sun_day_2
    id: home_hours_of_sun_day_2
#day 3

  - platform: homeassistant
    id: temperature_hi_day_3
    entity_id: sensor.temperature_hi_day_3
    on_value:
      - lvgl.label.update:
          id: home_weather_max_day_3
          text: 
            format: "%.1f°"
            args: [ 'x' ]  

  - platform: homeassistant
    id: temperature_low_day_3
    entity_id: sensor.temperature_low_day_3
    on_value:
      - lvgl.label.update:
          id: home_weather_min_day_3
          text: 
            format: "%.1f°"
            args: [ 'x' ]

  - platform: homeassistant
    id: precipitation_day_3
    entity_id: sensor.precipitation_day_3
    on_value:
      - lvgl.label.update:
          id: precipitation_text_day_3
          text: 
            format: "%.1fmm"
            args: [ 'id(precipitation_day_3).state*25.4' ]

  - platform: homeassistant
    id: precipitation_probability_day_3
    entity_id: sensor.precipitation_probability_day_3
    on_value:
      - lvgl.label.update:
          id: precipitation_probability_text_day_3
          text:
            format: "%.0f%%"
            args: [ 'x' ]

  - platform: homeassistant
    entity_id: sensor.home_hours_of_sun_day_3
    id: home_hours_of_sun_day_3


################################################################################
# Text Sensors
################################################################################
text_sensor:
  #-------------------------------------------------------------------------------
  # ESP32 internal sensors
  #-------------------------------------------------------------------------------
  - platform: wifi_info
    ip_address:
      name: IP Address
      id: ${device_internal_name}_ip_address
    ssid:
      name: Connected SSID
      id: ${device_internal_name}_connected_ssid
    mac_address:
      name: Mac Wifi Address
      id: ${device_internal_name}_mac_address


# sun rise/set
  - platform: sun
    name: Sun Rise
    id: sun_rise
    type: sunrise
    internal: True
    on_value:
      - lvgl.label.update:
          id: home_weather_sunrise
          text: 
            format: "#FFA500 \U000F059C# %s"
            args: [ x.c_str() ]
      - lvgl.label.update:
          id: home_weather_sunrise2
          text: 
            format: "#FFA500 \U000F059C# %s"
            args: [ x.c_str() ]
            
  - platform: sun
    name: Sun set
    id: sun_set
    type: sunset
    internal: True
    on_value:
      - lvgl.label.update:
          id: home_weather_sunset
          text: 
            format: "%s #FF0000 \U000F059B#  "
            args: [ x.c_str() ] 
      - lvgl.label.update:
          id: home_weather_sunset2
          text: 
            format: "%s #FF0000 \U000F059B#  "
            args: [ x.c_str() ] 

  - platform: homeassistant
    entity_id: weather.home
    id: weather_home
    on_value:
      - lvgl.label.update:
          id: home_weather_text
          text: 
            format: "%s"
            args: [ x.c_str() ]
      - lvgl.label.update:
          id: home_weather_text2
          text: 
            format: "%s"
            args: [ x.c_str() ]
      - script.execute: weather_img

  - platform: template
    id: daylight_duration
    update_interval: 60s
    lambda: |-
      std::string  sunrise = id(sun_rise).state.c_str();
      std::string  sunset = id(sun_set).state.c_str();
      if (sunrise.length() < 8) {
        std::string r = "sunrise";
        return r;
      }
      if (sunset.length() < 8) {
        std::string r = "sunset";
        return r;
      }
      std::string hh = sunrise.substr(0, 2);
      std::string mm = sunrise.substr(3, 2);
      std::string ss = sunrise.substr(6, 2);
      auto iSunrise = atoi(hh.c_str())*3600+atoi(mm.c_str())*60+atoi(ss.c_str());

      hh = sunset.substr(0, 2);
      mm = sunset.substr(3, 2);
      ss = sunset.substr(6, 2);
      auto iSunset = atoi(hh.c_str())*3600+atoi(mm.c_str())*60+atoi(ss.c_str());

      int total_seconds = iSunset - iSunrise;
      int hours = (total_seconds % 86400) / 3600;
      int minutes = ((total_seconds % 86400) % 3600) / 60;
      int seconds = ((total_seconds % 86400) % 3600) % 60;    
      return {str_sprintf("%02d:%02d:%02d", hours, minutes, seconds)};   
      
    on_value:
      - lvgl.label.update:
          id: home_weather_duration
          text:
            format: "%s"
            args: [ x.c_str() ]

  - platform: template
    id: sun_rise_short
    update_interval: 60s
    lambda: |-
      std::string  sunrise = id(sun_rise).state.c_str();
      if (sunrise.length() < 8) {
        std::string r = "sunrise";
        return r;
      }
      std::string hh = sunrise.substr(0, 2);
      std::string mm = sunrise.substr(3, 2);
      return {str_sprintf("%02d:%02d", atoi(hh.c_str()), atoi(mm.c_str()))};   
    on_value:
      - lvgl.label.update:
          id: home_weather_sunrise3
          text:
            format: "#FFA500 \U000F059C# %s"
            args: [ x.c_str() ]

  - platform: template
    id: sun_set_short
    update_interval: 60s
    lambda: |-
      std::string  sunset = id(sun_set).state.c_str();
      if (sunset.length() < 8) {
        std::string r = "sunset";
        return r;
      }
      std::string hh = sunset.substr(0, 2);
      std::string mm = sunset.substr(3, 2);
      return {str_sprintf("%02d:%02d", atoi(hh.c_str()), atoi(mm.c_str()))};   
    on_value:
      - lvgl.label.update:
          id: home_weather_sunset3
          text:
            format: "%s #FF0000 \U000F059B#  "
            args: [ x.c_str() ]


  - platform: homeassistant
    entity_id: sensor.day_0_condition
    id: forecast_day_0_condition
    on_value:
      - lvgl.label.update:
          id: forecast_condition_text_day_0
          text:
            format: "%s"
            args: [ x.c_str() ]
      - if:
          condition:
            - lambda: 'return id(forecast_day_0_condition).state == "rainy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_0
                text: "\U000F0597" # rainy
      - if:
          condition:
            - lambda: 'return id(forecast_day_0_condition).state == "clear-night";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_0
                text: "\U000F0594" # weather-night
      - if:
          condition:
            - lambda: 'return id(forecast_day_0_condition).state == "cloudy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_0
                text: "\U000F0590" # cloudy
      - if:
          condition:
            - lambda: 'return id(forecast_day_0_condition).state == "exceptional";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_0
                text: "\U000F0F2F" # exceptional
      - if:
          condition:
            - lambda: 'return id(forecast_day_0_condition).state == "fog";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_0
                text: "\U000F0591" # fog
      - if:
          condition:
            - lambda: 'return id(forecast_day_0_condition).state == "hail";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_0
                text: "\U000F0592" # hail
      - if:
          condition:
            - lambda: 'return id(forecast_day_0_condition).state == "lightning";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_0
                text: "\U000F0593" # lightning
      - if:
          condition:
            - lambda: 'return id(forecast_day_0_condition).state == "lightning-rainy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_0
                text: "\U000F067E" # lightning-rainy
      - if:
          condition:
            - lambda: 'return id(forecast_day_0_condition).state == "partlycloudy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_0
                text: "\U000F0595" # partlycloudy
      - if:
          condition:
            - lambda: 'return id(forecast_day_0_condition).state == "pouring";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_0
                text: "\U000F0596" # pouring
      - if:
          condition:
            - lambda: 'return id(forecast_day_0_condition).state == "snowy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_0
                text: "\U000F0598" # snowy
      - if:
          condition:
            - lambda: 'return id(forecast_day_0_condition).state == "snowy-rainy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_0
                text: "\U000F067F" # snowy-rainy
      - if:
          condition:
            - lambda: 'return id(forecast_day_0_condition).state == "sunny";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_0
                text: "\U000F0599" # sunny
      - if:
          condition:
            - lambda: 'return id(forecast_day_0_condition).state == "windy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_0
                text: "\U000F059D" # windy
      - if:
          condition:
            - lambda: 'return id(forecast_day_0_condition).state == "windy-variant";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_0
                text: "\U000F059E" # windy-variant
      - if:
          condition:
            or:
              - lambda: 'return id(forecast_day_0_condition).state == "unknown";'
              - lambda: 'return id(forecast_day_0_condition).state == "unavailable";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_0
                text: "\U000F14E4" # sunny-off

#day 1
  - platform: homeassistant
    entity_id: sensor.day_1_condition
    id: forecast_day_1_condition
    on_value:
      - lvgl.label.update:
          id: forecast_condition_text_day_1
          text:
            format: "%s"
            args: [ x.c_str() ]
      - if:
          condition:
            - lambda: 'return id(forecast_day_1_condition).state == "rainy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_1
                text: "\U000F0597" # rainy
      - if:
          condition:
            - lambda: 'return id(forecast_day_1_condition).state == "clear-night";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_1
                text: "\U000F0594" # weather-night
      - if:
          condition:
            - lambda: 'return id(forecast_day_1_condition).state == "cloudy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_1
                text: "\U000F0590" # cloudy
      - if:
          condition:
            - lambda: 'return id(forecast_day_1_condition).state == "exceptional";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_1
                text: "\U000F0F2F" # exceptional
      - if:
          condition:
            - lambda: 'return id(forecast_day_1_condition).state == "fog";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_1
                text: "\U000F0591" # fog
      - if:
          condition:
            - lambda: 'return id(forecast_day_1_condition).state == "hail";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_1
                text: "\U000F0592" # hail
      - if:
          condition:
            - lambda: 'return id(forecast_day_1_condition).state == "lightning";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_1
                text: "\U000F0593" # lightning
      - if:
          condition:
            - lambda: 'return id(forecast_day_1_condition).state == "lightning-rainy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_1
                text: "\U000F067E" # lightning-rainy
      - if:
          condition:
            - lambda: 'return id(forecast_day_1_condition).state == "partlycloudy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_1
                text: "\U000F0595" # partlycloudy
      - if:
          condition:
            - lambda: 'return id(forecast_day_1_condition).state == "pouring";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_1
                text: "\U000F0596" # pouring
      - if:
          condition:
            - lambda: 'return id(forecast_day_1_condition).state == "snowy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_1
                text: "\U000F0598" # snowy
      - if:
          condition:
            - lambda: 'return id(forecast_day_1_condition).state == "snowy-rainy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_1
                text: "\U000F067F" # snowy-rainy
      - if:
          condition:
            - lambda: 'return id(forecast_day_1_condition).state == "sunny";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_1
                text: "\U000F0599" # sunny
      - if:
          condition:
            - lambda: 'return id(forecast_day_1_condition).state == "windy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_1
                text: "\U000F059D" # windy
      - if:
          condition:
            - lambda: 'return id(forecast_day_1_condition).state == "windy-variant";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_1
                text: "\U000F059E" # windy-variant
      - if:
          condition:
            or:
              - lambda: 'return id(forecast_day_1_condition).state == "unknown";'
              - lambda: 'return id(forecast_day_1_condition).state == "unavailable";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_1
                text: "\U000F14E4" # sunny-off
#day 2
  - platform: homeassistant
    entity_id: sensor.day_2_condition
    id: forecast_day_2_condition
    on_value:
      - lvgl.label.update:
          id: forecast_condition_text_day_2
          text:
            format: "%s"
            args: [ x.c_str() ]
      - if:
          condition:
            - lambda: 'return id(forecast_day_2_condition).state == "rainy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_2
                text: "\U000F0597" # rainy
      - if:
          condition:
            - lambda: 'return id(forecast_day_2_condition).state == "clear-night";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_2
                text: "\U000F0594" # weather-night
      - if:
          condition:
            - lambda: 'return id(forecast_day_2_condition).state == "cloudy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_2
                text: "\U000F0590" # cloudy
      - if:
          condition:
            - lambda: 'return id(forecast_day_2_condition).state == "exceptional";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_2
                text: "\U000F0F2F" # exceptional
      - if:
          condition:
            - lambda: 'return id(forecast_day_2_condition).state == "fog";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_2
                text: "\U000F0591" # fog
      - if:
          condition:
            - lambda: 'return id(forecast_day_2_condition).state == "hail";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_2
                text: "\U000F0592" # hail
      - if:
          condition:
            - lambda: 'return id(forecast_day_2_condition).state == "lightning";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_2
                text: "\U000F0593" # lightning
      - if:
          condition:
            - lambda: 'return id(forecast_day_2_condition).state == "lightning-rainy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_2
                text: "\U000F067E" # lightning-rainy
      - if:
          condition:
            - lambda: 'return id(forecast_day_2_condition).state == "partlycloudy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_2
                text: "\U000F0595" # partlycloudy
      - if:
          condition:
            - lambda: 'return id(forecast_day_2_condition).state == "pouring";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_2
                text: "\U000F0596" # pouring
      - if:
          condition:
            - lambda: 'return id(forecast_day_2_condition).state == "snowy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_2
                text: "\U000F0598" # snowy
      - if:
          condition:
            - lambda: 'return id(forecast_day_2_condition).state == "snowy-rainy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_2
                text: "\U000F067F" # snowy-rainy
      - if:
          condition:
            - lambda: 'return id(forecast_day_2_condition).state == "sunny";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_2
                text: "\U000F0599" # sunny
      - if:
          condition:
            - lambda: 'return id(forecast_day_2_condition).state == "windy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_2
                text: "\U000F059D" # windy
      - if:
          condition:
            - lambda: 'return id(forecast_day_2_condition).state == "windy-variant";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_2
                text: "\U000F059E" # windy-variant
      - if:
          condition:
            or:
              - lambda: 'return id(forecast_day_2_condition).state == "unknown";'
              - lambda: 'return id(forecast_day_2_condition).state == "unavailable";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_2
                text: "\U000F14E4" # sunny-off

  - platform: homeassistant
    entity_id: sensor.day_3_condition
    id: forecast_day_3_condition
    on_value:
      - lvgl.label.update:
          id: forecast_condition_text_day_3
          text:
            format: "%s"
            args: [ x.c_str() ]
      - if:
          condition:
            - lambda: 'return id(forecast_day_3_condition).state == "rainy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_3
                text: "\U000F0597" # rainy
      - if:
          condition:
            - lambda: 'return id(forecast_day_3_condition).state == "clear-night";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_3
                text: "\U000F0594" # weather-night
      - if:
          condition:
            - lambda: 'return id(forecast_day_3_condition).state == "cloudy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_3
                text: "\U000F0590" # cloudy
      - if:
          condition:
            - lambda: 'return id(forecast_day_3_condition).state == "exceptional";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_3
                text: "\U000F0F2F" # exceptional
      - if:
          condition:
            - lambda: 'return id(forecast_day_3_condition).state == "fog";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_3
                text: "\U000F0591" # fog
      - if:
          condition:
            - lambda: 'return id(forecast_day_3_condition).state == "hail";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_3
                text: "\U000F0592" # hail
      - if:
          condition:
            - lambda: 'return id(forecast_day_3_condition).state == "lightning";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_3
                text: "\U000F0593" # lightning
      - if:
          condition:
            - lambda: 'return id(forecast_day_3_condition).state == "lightning-rainy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_3
                text: "\U000F067E" # lightning-rainy
      - if:
          condition:
            - lambda: 'return id(forecast_day_3_condition).state == "partlycloudy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_3
                text: "\U000F0595" # partlycloudy
      - if:
          condition:
            - lambda: 'return id(forecast_day_3_condition).state == "pouring";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_3
                text: "\U000F0596" # pouring
      - if:
          condition:
            - lambda: 'return id(forecast_day_3_condition).state == "snowy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_3
                text: "\U000F0598" # snowy
      - if:
          condition:
            - lambda: 'return id(forecast_day_3_condition).state == "snowy-rainy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_3
                text: "\U000F067F" # snowy-rainy
      - if:
          condition:
            - lambda: 'return id(forecast_day_3_condition).state == "sunny";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_3
                text: "\U000F0599" # sunny
      - if:
          condition:
            - lambda: 'return id(forecast_day_3_condition).state == "windy";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_3
                text: "\U000F059D" # windy
      - if:
          condition:
            - lambda: 'return id(forecast_day_3_condition).state == "windy-variant";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_3
                text: "\U000F059E" # windy-variant
      - if:
          condition:
            or:
              - lambda: 'return id(forecast_day_3_condition).state == "unknown";'
              - lambda: 'return id(forecast_day_3_condition).state == "unavailable";'
          then:
            - lvgl.label.update:
                id: forecast_condition_icon_day_3
                text: "\U000F14E4" # sunny-off

  #-------------------------------------------------------------------------------
  # Custom Text sensors
  #-------------------------------------------------------------------------------
  - platform: template
    name: Uptime Human Readable
    id: ${device_internal_name}_uptime_human
    icon: mdi:clock-start

  - platform: template
    name: RTC
    id: label_clock