substitutions:
  device_name: "esp32-dashboard"
  friendly_name: "ESP32 Dashboard"
  
esphome:
  name: ${device_name}
  platform: ESP32
  board: esp32dev
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_name} Fallback"
    password: !secret ap_password

captive_portal:

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: !secret ha_api_key

# Enable over-the-air updates
ota:
  - platform: esphome
    password: !secret ota_password

# Web server for local access
web_server:
  port: 80

# Time component for displaying time
time:
  - platform: homeassistant
    id: ha_time
    timezone: "America/New_York"  # Change to your timezone

# Fonts for the display
font:
  - file: "fonts/Roboto-Regular.ttf"
    id: font_small
    size: 14
  - file: "fonts/Roboto-Regular.ttf"
    id: font_medium
    size: 20
  - file: "fonts/Roboto-Bold.ttf"
    id: font_large
    size: 36
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: font_icons
    size: 48
    glyphs:
      - "\U000F0590" # weather-cloudy
      - "\U000F0599" # weather-sunny
      - "\U000F0594" # weather-rainy
      - "\U000F0593" # weather-pouring
      - "\U000F0591" # weather-fog
      - "\U000F0595" # weather-snowy
      - "\U000F067F" # thermometer
      - "\U000F058E" # water-percent

# SPI Configuration for Waveshare e-paper display
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23

# Waveshare 7.5" E-Paper Display (adjust model as needed)
display:
  - platform: waveshare_epaper
    cs_pin: GPIO5
    dc_pin: GPIO17
    busy_pin: GPIO4
    reset_pin: GPIO16
    model: 7.50inv2
    update_interval: 300s  # Update every 5 minutes
    rotation: 0
    lambda: |-
      // Display dimensions (adjust based on your display model)
      const int width = it.get_width();
      const int height = it.get_height();
      
      // Header section
      it.rectangle(0, 0, width, 60);
      it.strftime(10, 10, id(font_large), TextAlign::TOP_LEFT, "%H:%M", id(ha_time).now());
      it.strftime(width - 10, 10, id(font_medium), TextAlign::TOP_RIGHT, "%A, %B %d %Y", id(ha_time).now());
      
      // Weather Section
      int y_offset = 80;
      it.printf(10, y_offset, id(font_medium), "Weather");
      
      // Temperature
      if (id(outside_temperature).has_state()) {
        it.printf(10, y_offset + 40, id(font_icons), "\U000F067F");
        it.printf(70, y_offset + 40, id(font_large), "%.1f°", id(outside_temperature).state);
      }
      
      // Humidity
      if (id(outside_humidity).has_state()) {
        it.printf(200, y_offset + 40, id(font_icons), "\U000F058E");
        it.printf(260, y_offset + 40, id(font_large), "%.0f%%", id(outside_humidity).state);
      }
      
      // Indoor Section
      y_offset = 220;
      it.printf(10, y_offset, id(font_medium), "Indoor");
      
      if (id(indoor_temperature).has_state()) {
        it.printf(10, y_offset + 40, id(font_large), "Temp: %.1f°", id(indoor_temperature).state);
      }
      
      if (id(indoor_humidity).has_state()) {
        it.printf(10, y_offset + 80, id(font_large), "Humidity: %.0f%%", id(indoor_humidity).state);
      }
      
      // Status section at bottom
      y_offset = height - 40;
      it.line(0, y_offset - 10, width, y_offset - 10);
      it.strftime(10, y_offset, id(font_small), TextAlign::BOTTOM_LEFT, "Last update: %H:%M", id(ha_time).now());
      
      // WiFi status
      if (WiFi.isConnected()) {
        it.printf(width - 10, y_offset, id(font_small), TextAlign::BOTTOM_RIGHT, "WiFi: %.0f dBm", WiFi.RSSI());
      } else {
        it.printf(width - 10, y_offset, id(font_small), TextAlign::BOTTOM_RIGHT, "WiFi: Disconnected");
      }

# Sensors from Home Assistant
sensor:
  # Outside temperature
  - platform: homeassistant
    id: outside_temperature
    entity_id: weather.home  # Change to your weather entity
    attribute: temperature
    internal: true
    
  # Outside humidity
  - platform: homeassistant
    id: outside_humidity
    entity_id: weather.home  # Change to your weather entity
    attribute: humidity
    internal: true
    
  # Indoor temperature
  - platform: homeassistant
    id: indoor_temperature
    entity_id: sensor.indoor_temperature  # Change to your sensor
    internal: true
    
  # Indoor humidity
  - platform: homeassistant
    id: indoor_humidity
    entity_id: sensor.indoor_humidity  # Change to your sensor
    internal: true
    
  # WiFi Signal Strength
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    update_interval: 60s

# Text sensors
text_sensor:
  # WiFi Info
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
    ssid:
      name: "${friendly_name} SSID"
      
  # ESPHome Version
  - platform: version
    name: "${friendly_name} ESPHome Version"

# Binary sensors
binary_sensor:
  # Status LED (optional, if you have an LED on your board)
  - platform: status
    name: "${friendly_name} Status"

# Buttons for manual refresh and restart
button:
  - platform: restart
    name: "${friendly_name} Restart"
  
  - platform: template
    name: "${friendly_name} Refresh Display"
    on_press:
      - component.update: display

# Deep sleep configuration (optional - saves power)
# Uncomment to enable deep sleep mode
# deep_sleep:
#   run_duration: 30s
#   sleep_duration: 5min
#   id: deep_sleep_1
